% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers.R
\name{prep_worm}
\alias{prep_worm}
\alias{cut_group}
\alias{dodge_steps}
\title{Helper Functions for wormsplot}
\usage{
prep_worm(data, shorten_lines = 1, groupwise = TRUE)

cut_group(x, groupwidth)

dodge_steps(data, shorten_lines = 1, dodge = NULL)
}
\arguments{
\item{data}{a dataframe or tibble. Must include columns 'x' and 'y'.
If \code{groupwise = FALSE} must include columns 'group'.}

\item{shorten_lines}{How much space should be added between
steps? \code{0} results in a regular stepped line when plotted as a worm.
Default is 1. Shortening is capped at half the width of the shortest adjacent step.}

\item{groupwise}{boolean. Is data being inserted for an individual worm only?}
}
\description{
\code{prep_worm()} transforms a dataset from standard worms format (one data point
for each new step, plus one extra for the end of each worm) to a format with
one row for each horizontal line endpoint. This is primarily used as the first
processing step in StatWorm, but may also be useful to the user when aligning
custom elements (e.g. labels) to plotted worms. \code{dodge_steps()} is the function
used for vertical dodging of worms, to be used after preprocessing with \code{prep_worm}.
\code{cut_group()} is similar to ggplot's \code{cut_width}, but rather than cutting into
bins of equal width, it groups all elements that are less than a given distance
away from each other (i.e. from at least one other member of the group).
It is used internally for vertical dodging of worms, but may also be useful
for various graphing needs.
}
\examples{
   # one data point for each new step, plus one extra for the end of the worm
   data <- data.frame(
      x = c(1, 2, 4, 1, 3, 4, 1, 1.5, 2.5, 4),
      y = c(1, 2, 2, 2, 1, 1, 1.5, 1, 1.7, 1.7),
      group = rep(c("you", "me", "him"), times = c(3, 3, 4))
   )

   prep_worm(data, groupwise = FALSE)

   cut_width(data$y)
}
